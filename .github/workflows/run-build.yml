name: Build

on:
  workflow_call:
    inputs:
      mlir_override:
        description: 'Git SHA of commit in tenstorrent/tt-mlir'
        required: false
        type: string
      docker-image:
        description: 'Docker image to use for build'
        required: true
        type: string
      setup-args:
        description: 'Arguments to pass to setup.py'
        required: false
        type: string
      build-cache-run-id:
        description: 'Run ID of the run you want to use the build artifact from. Will override mlir_override if set.'
        required: false
        type: string

jobs:
  build:
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        build: [
          {runs-on: wormhole_b0, name: "run"},
        ]

    runs-on:
      - ${{ matrix.build.runs-on }}

    container:
      image: ${{ inputs.docker-image }}
      options: --device /dev/tenstorrent/0
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
        - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env
        - /mnt/dockercache:/mnt/dockercache

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        lfs: true

    - name: Override tt-mlir SHA mlir_override is set
      if: ${{ inputs.mlir_override }}
      shell: bash
      run: |
          # Update the CMakeLists.txt file with the new SHA
          sed -i "s/set(TT_MLIR_VERSION \".*\")/set(TT_MLIR_VERSION \"${{ inputs.mlir_override }}\")/" third_party/CMakeLists.txt

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
        echo "build-output-dir=$(pwd)/build" >> "$GITHUB_OUTPUT"

    - name: Git safe dir
      run: git config --global --add safe.directory ${{ steps.strings.outputs.work-dir }}

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        create-symlink: true
        key: build_cache


    # if using a cached build, download remote artefact and reupload
    - name: Download cached artefacts
      uses: actions/download-artifact@v4
      if: ${{ inputs.build-cache-run-id }}
      with:
        name: install-artifacts # this is the name of the artefact from a prev. run
        path: artifacts/artifact.tar # write out to where the upload artifacts expects this to be
        github-token: ${{ secrets.GITHUB_TOKEN }} # token with actions:read permissions on target repo
        run-id: ${{ inputs.build-cache-run-id }}
        # repository default set to this repo


    - name: Upload artifacts to archive
      if: ${{ inputs.build-cache-run-id }}
      uses: actions/upload-artifact@v4
      with:
        name: install-artifacts
        path: artifacts/artifact.tar

    - name: Early Exit if build-cache-run-id is set
      if: ${{ inputs.build-cache-run-id }}
      shell: bash
      run: |
        echo "Using build from ${{ inputs.build-cache-run-id }}. Exiting build job early."
        exit 0


    # Build project
    - name: Build
      shell: bash
      run: |
        source env/activate
        python setup.py bdist_wheel --code_coverage ${{ inputs.setup-args }}

    - name: Verify tt-mlir SHA override
      if: ${{ inputs.mlir_override }}
      continue-on-error: true
      shell: bash
      run: |
          cd third_party/tt-mlir
          branch_name=$(git rev-parse --abbrev-ref HEAD)
          commit_sha=$(git rev-parse HEAD)
          commit_title=$(git log -1 --pretty=%s)
          echo "Branch name: $branch_name"
          echo "Commit SHA: $commit_sha"
          echo "Commit title: $commit_title"
          echo "::notice::Using tt-mlir: $branch_name, commit: $commit_sha, title: $commit_title"
          cd ../..


    - name: Copy wheel and env directories
      shell: bash
      run: |
        mkdir artifacts
        cd artifacts
        mkdir wheels
        cp ../dist/*.whl wheels
        tar cvf artifact.tar .

    - name: Upload artifacts to archive
      uses: actions/upload-artifact@v4
      with:
        name: install-artifacts
        path: artifacts/artifact.tar
