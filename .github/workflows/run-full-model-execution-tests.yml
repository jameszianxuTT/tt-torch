name: Run Full Model Execution Tests

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      docker-image:
        description: 'Docker image to use for build'
        required: true
        type: string
      run-codecov:
        description: 'Run code coverage reports'
        required: false
        type: string # properly a boolean but autocast to string when passed in using 'with' inputs
        default: 'true'
      is_nightly:
        description: 'Set to "true" to run the full (common + nightly) test set'
        required: false
        type: string
        default: 'false'
  workflow_run:
    workflows: [Build]
    types: [completed]

# Define test groups using YAML anchors so they can be composed to form push/pr list, and nightly list where
# the nightly list includes the push/pr list. Each of these groups will be a seperate parallel job.
common_eval_1: &common_eval_1
  runs-on: wormhole_b0
  name: "eval_1"
  tests: |
    tests/models/autoencoder_linear/test_autoencoder_linear.py::test_autoencoder_linear[full-eval]
    tests/models/distilbert/test_distilbert.py::test_distilbert[full-distilbert-base-uncased-eval]

common_eval_2: &common_eval_2
  runs-on: wormhole_b0
  name: "eval_2"
  tests: |
    tests/models/mnist/test_mnist.py::test_mnist_train[full-eval]
    tests/models/MobileNetV2/test_MobileNetV2.py::test_MobileNetV2[full-eval]

nightly_eval_1: &nightly_eval_1
  runs-on: wormhole_b0
  name: "nightly_eval_1"
  tests: |
    tests/models/albert/test_albert_masked_lm.py::test_albert_masked_lm[full-albert/albert-xxlarge-v2-eval]
    tests/models/torchvision/test_torchvision_image_classification.py::test_torchvision_image_classification[full-eval-regnet_y_400mf]

nightly_eval_2: &nightly_eval_2
  runs-on: wormhole_b0
  name: "nightly_eval_2"
  tests: |
    tests/models/torchvision/test_torchvision_image_classification.py::test_torchvision_image_classification[full-eval-regnet_x_400mf]
    tests/models/torchvision/test_torchvision_image_classification.py::test_torchvision_image_classification[full-eval-regnet_x_800mf]

push_tests: &push_tests
  - *common_eval_1
  - *common_eval_2

nightly_tests: &nightly_tests
  - *common_eval_1
  - *common_eval_2
  - *nightly_eval_1
  - *nightly_eval_2

# Define a container anchor so itâ€™s only written once.
x-container: &x-container
  image: ${{ inputs.docker-image }}
  options: --user root --device /dev/tenstorrent/0 --shm-size=4gb
  volumes:
    - /dev/hugepages:/dev/hugepages
    - /dev/hugepages-1G:/dev/hugepages-1G
    - /etc/udev/rules.d:/etc/udev/rules.d
    - /lib/modules:/lib/modules
    - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env
    - /mnt/dockercache:/mnt/dockercache

# Define common steps anchor.
x-common-steps: &x-common-steps
  - uses: actions/checkout@v4
    with:
      submodules: recursive
      lfs: true
  - name: Fetch job id
    id: fetch-job-id
    uses: tenstorrent/tt-github-actions/.github/actions/job_id@main
    with:
      job_name: "test execution (${{ matrix.build.runs-on }}, ${{ matrix.build.name }})"
  - name: Set reusable strings
    id: strings
    shell: bash
    env:
      JOB_ID: ${{ steps.fetch-job-id.outputs.job_id }}
    run: |
      echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
      echo "install-dir=$(pwd)/install" >> "$GITHUB_OUTPUT"
      echo "dist-dir=$(pwd)/dist" >> "$GITHUB_OUTPUT"
      echo "test_report_path_models=report_models_$JOB_ID.xml" >> "$GITHUB_OUTPUT"
  - name: Use build artifacts
    uses: actions/download-artifact@v4
    with:
      name: install-artifacts
      path: ${{ steps.strings.outputs.install-dir }}
  - name: Untar install directory
    shell: bash
    working-directory: ${{ steps.strings.outputs.install-dir }}
    run: |
      tar xvf artifact.tar
      mkdir -p ${{ steps.strings.outputs.dist-dir }}
      mv wheels/* ${{ steps.strings.outputs.dist-dir }}
  - name: install tt-torch
    shell: bash
    run: |
      source env/activate
      pip install ${{ steps.strings.outputs.dist-dir }}/*.whl
  - name: Run Tests
    env:
      HF_HOME: /mnt/dockercache/huggingface
      TORCH_HOME: /mnt/dockercache/torch
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
    shell: bash
    run: |
      source env/activate
      apt-get update
      apt install -y libgl1 libglx-mesa0
      pytest -v ${{ matrix.build.tests }} \
        --junit-xml=${{ steps.strings.outputs.test_report_path_models }} \
        --cov=tt_torch --cov-report term --cov-report xml:coverage.xml --cov-append
  - name: Upload Test Report Models
    uses: actions/upload-artifact@v4
    if: success() || failure()
    with:
      name: test-reports-models-${{ matrix.build.runs-on }}-${{ matrix.build.name }}-${{ steps.fetch-job-id.outputs.job_id }}
      path: ${{ steps.strings.outputs.test_report_path_models }}
  - name: Upload coverage reports to Codecov
    if: ${{ (success() || failure()) && inputs.run-codecov == 'true' }}
    continue-on-error: true
    uses: codecov/codecov-action@v5
    with:
      files: coverage.info,.coverage,coverage.xml
      token: ${{ secrets.CODECOV_TOKEN }}
  - name: Upload test results to Codecov
    if: ${{ (success() || failure()) && inputs.run-codecov == 'true' }}
    continue-on-error: true
    uses: codecov/test-results-action@v1
    with:
      files: ${{ steps.strings.outputs.test_report_path_models }}
      disable_search: true
      token: ${{ secrets.CODECOV_TOKEN }}

# Define two jobs that share container and steps via anchors.
jobs:
  tests_common:
    if: ${{ inputs.is_nightly != 'true' }}
    name: "Full Model Execution Tests (Common)"
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        build: *push_tests
    runs-on: ${{ matrix.build["runs-on"] }}
    container: *x-container
    steps: *x-common-steps

  tests_nightly:
    if: ${{ inputs.is_nightly == 'true' }}
    name: "Full Model Execution Tests (Nightly)"
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        build:
          - *nightly_tests
    runs-on: ${{ matrix.build["runs-on"] }}
    container: *x-container
    steps: *x-common-steps
