name: Run Model Compile Depth Benchmark Tests

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      docker-image:
        description: 'Docker image to use for build'
        required: true
        type: string
      matrix-json:
        description: 'Matrix of tests to run'
        required: true
        type: string
  workflow_run:
    workflows: [Build] # backref to run-build as dependency
    types: [completed]

jobs:
  tests:
    timeout-minutes: 500
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(inputs.matrix-json) }} # Use the input matrix from the workflow call

    runs-on:
      - ${{ matrix.build.runs-on }}

    name: "test benchmark (${{ matrix.build.runs-on }}, ${{ matrix.build.name }})"

    container:
      image: ${{ inputs.docker-image }}
      options: --user root --device /dev/tenstorrent/0 --shm-size=4gb
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
        - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env
        - /mnt/dockercache:/mnt/dockercache
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        lfs: true

    - name: Fetch job id
      id: fetch-job-id
      uses: tenstorrent/tt-github-actions/.github/actions/job_id@main
      with:
        job_name: "test benchmark (${{ matrix.build.runs-on }}, ${{ matrix.build.name }})" # reference above tests.name

    - name: Set reusable strings
      id: strings
      shell: bash
      env:
        JOB_ID: ${{ steps.fetch-job-id.outputs.job_id }}

      run: |
        echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
        echo "install-dir=$(pwd)/install" >> "$GITHUB_OUTPUT"
        echo "dist-dir=$(pwd)/dist" >> "$GITHUB_OUTPUT"
        echo "test_report_path_models=report_models_$JOB_ID.xml" >> "$GITHUB_OUTPUT"
    - name: Use build artifacts
      uses: actions/download-artifact@v4
      with:
        name: install-artifacts
        path: ${{ steps.strings.outputs.install-dir }}

    - name: 'Untar install directory'
      shell: bash
      working-directory: ${{ steps.strings.outputs.install-dir }}
      run: |
        tar xvf artifact.tar
        mkdir -p ${{ steps.strings.outputs.dist-dir }}
        mv wheels/* ${{ steps.strings.outputs.dist-dir }}

    - name: install tt-torch
      shell: bash
      run: |
        source env/activate
        pip install ${{ steps.strings.outputs.dist-dir }}/*.whl

    - name: Run Execution Benchmark Tests
      env:
        HF_HOME: /mnt/dockercache/huggingface
        TORCH_HOME: /mnt/dockercache/torch
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      shell: bash
      run: |
        source env/activate
        set +e
        mkdir -p ${{ steps.strings.outputs.work-dir }}/pytest-logs
        counter=0
        total_tests=$(echo '${{ toJSON(matrix.build.tests) }}' | jq -r '.[]' | wc -l)
        for test in $(echo '${{ toJSON(matrix.build.tests) }}' | jq -r '.[]'); do
            counter=$((counter + 1))
            test_name=$(echo "$test" | sed 's/[^a-zA-Z0-9]/_/g')  # Sanitize test name for filename
            echo "========================================"
            echo "Running test $counter of $total_tests: $test_name"
            echo "========================================"

            pytest -svv "$test" \
                --junit-xml=${{ steps.strings.outputs.test_report_path_models }}_subtest_${test_name}.xml \
                --crashsafe | tee ${{ steps.strings.outputs.work-dir }}/pytest-logs/${test_name}.log

            echo "Wrote junitxml report ${{ steps.strings.outputs.test_report_path_models }}_subtest_${test_name}.xml"
            echo "wrote log ${{ steps.strings.outputs.work-dir }}/pytest-logs/${test_name}.log"
        done
        set -e
        exit 0 # force successful exit

    - name: Upload Pytest Logs
      uses: actions/upload-artifact@v4
      with:
        name: pytest-logs-${{ matrix.build.runs-on }}-${{ matrix.build.name }}
        path: ${{ steps.strings.outputs.work-dir }}/pytest-logs

    - name: Postprocess and Fuse Test Reports
      shell: bash
      run: |
        source env/activate
        python tt_torch/tools/postprocess_crashsafe_reports.py "${{ steps.strings.outputs.test_report_path_models }}_subtest*_crashsafe.xml" "${{ steps.strings.outputs.test_report_path_models }}"

    - name: Upload Test Report Models
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: test-reports-models-benchmark-${{ matrix.build.runs-on }}-${{ matrix.build.name }}-${{ steps.fetch-job-id.outputs.job_id }}
        path: ${{ steps.strings.outputs.test_report_path_models }}
